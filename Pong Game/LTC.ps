SamplerState gsamLinearClamp : register(s0);
Texture2D LTC_LUT1 : register(t0);
Texture2D LTC_LUT2 : register(t1);

struct PixelInputType
{
    float4 Position : SV_POSITION;
    float3 WorldPos : POSITION;
    float3 Normal : NORMAL;
};

cbuffer LightBuffer : register(b0)
{
    float3 Intensity;
    float PaddingI;
    float3 Color;
    float PaddingC;
};

cbuffer LightPoints : register(b1)
{

    // AreaLight
    float3 AreaLightPoint0InWorld;
    float LightPad2;
    float3 AreaLightPoint1InWorld;
    float LightPad3;
    float3 AreaLightPoint2InWorld;
    float LightPad4;
    float3 AreaLightPoint3InWorld;
    float LightPad5;
};

cbuffer MaterialBuffer : register(b2)
{
    float3 BaseColor;
    float Roughness;
    float3 CameraPosition;
    float Metallic;
};



const static float LTC_LUT_SIZE = 64.0;
const static float LTC_LUT_SCALE = (LTC_LUT_SIZE - 1.0) / LTC_LUT_SIZE;
const static float LTC_LUT_BIAS = 0.5 / LTC_LUT_SIZE;
static const float F0_DIELECTRIC = 0.04f;

float3 IntegrateEdgeVec(float3 v1, float3 v2)
{
    float x = dot(v1, v2);
    float y = abs(x);

    float a = 0.8543985 + (0.4965155 + 0.0145206 * y) * y;
    float b = 3.4175940 + (4.1616724 + y) * y;
    float v = a / b;

    float theta_sintheta = (x > 0.0) ? v : 0.5 * rsqrt(max(1.0 - x * x, 1e-7)) - v;

    return cross(v1, v2) * theta_sintheta;
}

float IntegrateEdge(float3 v1, float3 v2)
{
    return IntegrateEdgeVec(v1, v2).z;
}

void ClipQuadToHorizon(inout float3 L[5], out int n)
{
    // detect clipping config
    int config = 0;
    if (L[0].z > 0.0)
        config += 1;
    if (L[1].z > 0.0)
        config += 2;
    if (L[2].z > 0.0)
        config += 4;
    if (L[3].z > 0.0)
        config += 8;

    // clip
    n = 0;

    if (config == 0)
    {
        // clip all
    }
    else if (config == 1) // V1 clip V2 V3 V4
    {
        n = 3;
        L[1] = -L[1].z * L[0] + L[0].z * L[1];
        L[2] = -L[3].z * L[0] + L[0].z * L[3];
    }
    else if (config == 2) // V2 clip V1 V3 V4
    {
        n = 3;
        L[0] = -L[0].z * L[1] + L[1].z * L[0];
        L[2] = -L[2].z * L[1] + L[1].z * L[2];
    }
    else if (config == 3) // V1 V2 clip V3 V4
    {
        n = 4;
        L[2] = -L[2].z * L[1] + L[1].z * L[2];
        L[3] = -L[3].z * L[0] + L[0].z * L[3];
    }
    else if (config == 4) // V3 clip V1 V2 V4
    {
        n = 3;
        L[0] = -L[3].z * L[2] + L[2].z * L[3];
        L[1] = -L[1].z * L[2] + L[2].z * L[1];
    }
    else if (config == 5) // V1 V3 clip V2 V4) impossible
    {
        n = 0;
    }
    else if (config == 6) // V2 V3 clip V1 V4
    {
        n = 4;
        L[0] = -L[0].z * L[1] + L[1].z * L[0];
        L[3] = -L[3].z * L[2] + L[2].z * L[3];
    }
    else if (config == 7) // V1 V2 V3 clip V4
    {
        n = 5;
        L[4] = -L[3].z * L[0] + L[0].z * L[3];
        L[3] = -L[3].z * L[2] + L[2].z * L[3];
    }
    else if (config == 8) // V4 clip V1 V2 V3
    {
        n = 3;
        L[0] = -L[0].z * L[3] + L[3].z * L[0];
        L[1] = -L[2].z * L[3] + L[3].z * L[2];
        L[2] = L[3];
    }
    else if (config == 9) // V1 V4 clip V2 V3
    {
        n = 4;
        L[1] = -L[1].z * L[0] + L[0].z * L[1];
        L[2] = -L[2].z * L[3] + L[3].z * L[2];
    }
    else if (config == 10) // V2 V4 clip V1 V3) impossible
    {
        n = 0;
    }
    else if (config == 11) // V1 V2 V4 clip V3
    {
        n = 5;
        L[4] = L[3];
        L[3] = -L[2].z * L[3] + L[3].z * L[2];
        L[2] = -L[2].z * L[1] + L[1].z * L[2];
    }
    else if (config == 12) // V3 V4 clip V1 V2
    {
        n = 4;
        L[1] = -L[1].z * L[2] + L[2].z * L[1];
        L[0] = -L[0].z * L[3] + L[3].z * L[0];
    }
    else if (config == 13) // V1 V3 V4 clip V2
    {
        n = 5;
        L[4] = L[3];
        L[3] = L[2];
        L[2] = -L[1].z * L[2] + L[2].z * L[1];
        L[1] = -L[1].z * L[0] + L[0].z * L[1];
    }
    else if (config == 14) // V2 V3 V4 clip V1
    {
        n = 5;
        L[4] = -L[0].z * L[3] + L[3].z * L[0];
        L[0] = -L[0].z * L[1] + L[1].z * L[0];
    }
    else if (config == 15) // V1 V2 V3 V4
    {
        n = 4;
    }

    if (n == 3)
        L[3] = L[0];
    if (n == 4)
        L[4] = L[0];
}

float3 LTC_Evaluate(float3 N, float3 V, float3 P, float3x3 Minv, float3 points[4], bool twoSided)
{
    // construct orthonormal basis around N
    float3 T1, T2;
    T1 = normalize(V - N * dot(V, N));
    T2 = cross(N, T1);

    // rotate area light in (T1, T2, N) basis
    Minv = mul(Minv, float3x3(T1, T2, N));

    // polygon (allocate 5 vertices for clipping)
    float3 L[5];
    L[0] = mul(Minv, points[0].xyz - P);
    L[1] = mul(Minv, points[1].xyz - P);
    L[2] = mul(Minv, points[2].xyz - P);
    L[3] = mul(Minv, points[3].xyz - P);
    L[4] = L[0];

    int n;
    ClipQuadToHorizon(L, n);
    
    if (n == 0)
        return float3(0, 0, 0);

    // project onto sphere
    L[0] = normalize(L[0]);
    L[1] = normalize(L[1]);
    L[2] = normalize(L[2]);
    L[3] = normalize(L[3]);
    L[4] = normalize(L[4]);

    // integrate
    float sum = 0.0;

    sum += IntegrateEdge(L[0], L[1]);
    sum += IntegrateEdge(L[1], L[2]);
    sum += IntegrateEdge(L[2], L[3]);
    if (n >= 4)
        sum += IntegrateEdge(L[3], L[4]);
    if (n == 5)
        sum += IntegrateEdge(L[4], L[0]);

    sum = twoSided ? abs(sum) : max(0.0, sum);

    float3 Lo_i = float3(sum, sum, sum);

    return Lo_i;
}

float3 AreaLighting(float3 Radiance, float3 Normal, float3 ViewDir, float3 WorldPos, float Metallic, float3 BaseColor, float4 t1, float4 t2, float3 Points[4])
{
    float3x3 Minv = float3x3(
		float3(t1.x, 0, t1.z),
		float3(0, 1, 0),
		float3(t1.y, 0, t1.w)
	);
				
    float3x3 Identity = float3x3(
		float3(1, 0, 0),
		float3(0, 1, 0),
		float3(0, 0, 1)
	);
      
    float3 F0 = lerp(F0_DIELECTRIC.rrr, BaseColor.rgb, Metallic);
    
    float3 SpecularBRDFCos = LTC_Evaluate(Normal, ViewDir, WorldPos, Minv, Points, false);
    // BRDF shadowing and Fresnel
    SpecularBRDFCos *= (F0 * t2.x + (1.0f - F0) * t2.y);
    float3 DiffuseBRDFCos = LTC_Evaluate(Normal, ViewDir, WorldPos, Identity, Points, false);
    
    DiffuseBRDFCos *= 1.0 - Metallic; // Metallic surfaces have no diffuse reflections

    return (DiffuseBRDFCos + SpecularBRDFCos) * Radiance;
}

float4 PixelFragmentShader(PixelInputType input) : SV_Target
{
    float3 FinalColor = float3(0, 0, 0);
    float3 ViewDir = normalize(input.WorldPos - CameraPosition);
    float3 Normal = normalize(input.Normal);
    
    float NoV = saturate(dot(input.Normal, ViewDir));
    float2 UV = float2(Roughness, sqrt(1.0f - NoV));
    UV = UV * LTC_LUT_SCALE + LTC_LUT_BIAS;
				
    float4 t1 = LTC_LUT1.SampleLevel(gsamLinearClamp, UV, 0);
    float4 t2 = LTC_LUT2.SampleLevel(gsamLinearClamp, UV, 0);
								
    float3 Points[4];
    Points[0] = AreaLightPoint0InWorld;
    Points[1] = AreaLightPoint1InWorld;
    Points[2] = AreaLightPoint2InWorld;
    Points[3] = AreaLightPoint3InWorld;
				
    float3 Radiance = Intensity * Color;
    FinalColor += AreaLighting(Radiance, Normal, ViewDir, input.WorldPos, Metallic, BaseColor, t1, t2, Points);
    
    return float4(FinalColor, 1);
}